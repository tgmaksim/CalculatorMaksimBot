import sys
import asyncio
import aiohttp
from typing import Literal
from calculator import calculator
from sys_keys import TOKEN, api_key, process_id
from core import (
    db,
    html,
    SITE,
    OWNER,
    channel,
    security,
    markdown,
    subscribe,
    omsk_time,
    get_users,
    set_version,
    get_version,
    resources_path,
)

import aiogram.exceptions
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup as IMarkup
from aiogram.types import InlineKeyboardButton as IButton
from aiogram.filters.command import Command, CommandStart
from aiogram.types import (
    Message,
    FSInputFile,
    CallbackQuery,
    ReplyParameters,
    ReplyKeyboardRemove,
)

bot = Bot(TOKEN)
dp = Dispatcher()


# –ö–ª–∞—Å—Å —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class Data:
    users = set()


# –ö–ª–∞—Å—Å –Ω—É–∂–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ,
# –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
class UserState(StatesGroup):
    feedback = State('feedback')


# –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è "–∑–Ω–∞–∫–æ–º—ã—Ö"
@dp.message(Command('new_acquaintance'))
@security()
async def _new_acquaintance(message: Message):
    if await developer_command(message): return
    if message.reply_to_message and message.reply_to_message.text:
        id = int(message.reply_to_message.text.split('\n', 1)[0].replace("ID: ", ""))
        name = message.text.split(maxsplit=1)[1]
    else:
        id, name = message.text.split(maxsplit=2)[1:]
    if await db.execute("SELECT id FROM acquaintances WHERE id=?", (id,)):
        await db.execute("UPDATE acquaintances SET name=? WHERE id=?", (name, id))
        await message.answer("–î–∞–Ω–Ω—ã–µ –∑–Ω–∞–∫–æ–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω—ã")
    else:
        await db.execute("INSERT INTO acquaintances VALUES(?, ?)", (id, name))
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–Ω–∞–∫–æ–º—ã–π!")


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
@dp.message(F.reply_to_message.__and__(F.chat.id == OWNER).__and__(F.reply_to_message.text.startswith("ID")))
@security()
async def _sender(message: Message):
    user_id = int(message.reply_to_message.text.split('\n', 1)[0].replace("ID: ", ""))
    try:
        copy_message = await bot.copy_message(user_id, OWNER, message.message_id)
    except Exception as e:
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ {e.__class__.__name__}: {e}")
    else:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await bot.forward_message(OWNER, user_id, copy_message.message_id)


@dp.message(Command('admin'))
@security()
async def _admin(message: Message):
    if await developer_command(message): return
    await message.answer("–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n"
                         "/reload - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                         "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
                         "/db - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞\n"
                         "/version - –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞\n"
                         "/new_acquaintance - –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞–∫–æ–º–æ–≥–æ")


@dp.message(Command('reload'))
@security()
async def _reload(message: Message):
    if await developer_command(message): return
    if sys.argv[1] == "release":
        await message.answer("*–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞*", parse_mode=markdown)
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        await dp.stop_polling()
        asyncio.get_event_loop().stop()  # netangels –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –µ–≥–æ
    else:
        await message.answer("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")
        print("–í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω!")


@dp.message(Command('stop'))
@security()
async def _stop(message: Message):
    if await developer_command(message): return
    await message.answer("*–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞*", parse_mode=markdown)
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    if sys.argv[1] == "release":
        async with aiohttp.ClientSession() as session:
            async with session.post("https://panel.netangels.ru/api/gateway/token/",
                                    data={"api_key": api_key}) as response:
                token = (await response.json())['token']
                await session.post(f"https://api-ms.netangels.ru/api/v1/hosting/background-processes/{process_id}/stop",
                                   headers={"Authorization": f"Bearer {token}"})
    else:
        await dp.stop_polling()
        asyncio.get_event_loop().stop()


@dp.message(Command('db'))
@security()
async def _db(message: Message):
    if await developer_command(message): return
    await message.answer_document(FSInputFile(resources_path(db.db_path)))


@dp.message(Command('feedback'))
@security('state')
async def _start_feedback(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.set_state(UserState.feedback)
    markup = IMarkup(inline_keyboard=[[IButton(text="‚ùå", callback_data="stop_feedback")]])
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –õ—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤–æ–º",
                         reply_markup=markup)


@dp.message(UserState.feedback)
@security('state')
async def _feedback(message: Message, state: FSMContext):
    if await new_message(message, forward=False): return
    await state.clear()
    acquaintance = await username_acquaintance(message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""
    await bot.send_photo(OWNER,
                         photo=FSInputFile(resources_path("feedback.png")),
                         caption=f"ID: {message.chat.id}\n"
                                 f"{acquaintance}" +
                                 (f"USERNAME: @{message.from_user.username}\n" if message.from_user.username else "") +
                                 f"–ò–º—è: {message.from_user.first_name}\n" +
                                 (f"–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}\n" if message.from_user.last_name else "") +
                                 f"–í—Ä–µ–º—è: {omsk_time(message.date)}",
                         parse_mode=html)
    await message.forward(OWNER)
    await message.answer("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è")


@dp.callback_query(F.data == "sop_feedback")
@security('state')
async def _stop_feedback(callback_query: CallbackQuery, state: FSMContext):
    if await new_callback_query(callback_query): return
    await state.clear()
    await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@dp.message(Command('version'))
@security()
async def _version(message: Message):
    if message.text != '/version':
        if await developer_command(message): return
        version = message.text.split(" ", 1)[1]
        await set_version(version)
        await message.answer("–í–µ—Ä—Å–∏—è –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
    else:
        if await new_message(message): return
        version = await get_version()
        await message.answer(f"–í–µ—Ä—Å–∏—è: {version}\n<a href='{SITE}/{version}'>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ</a> üëá", parse_mode=html)


@dp.callback_query(F.data == 'subscribe')
@security()
async def _check_subscribe(callback_query: CallbackQuery):
    if await new_callback_query(callback_query, check_subscribe=False): return
    if (await bot.get_chat_member(channel, callback_query.message.chat.id)).status == 'left':
        await callback_query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ªüò¢", True)
        await callback_query.bot.send_message(OWNER, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
    else:
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!‚ù§Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", True)
        await callback_query.bot.send_message(OWNER, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª. –ï–º—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")


@dp.message(CommandStart())
@security('state')
async def _start(message: Message, state: FSMContext):
    if await new_message(message): return
    await state.clear()
    await (await message.answer("...–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫...", reply_markup=ReplyKeyboardRemove())).delete()
    markup = IMarkup(inline_keyboard=[[IButton(text="–ú–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="help")]])
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {await username_acquaintance(message, 'first_name')}\n"
                         f"[tgmaksim.ru]({SITE})",
                         parse_mode=markdown, reply_markup=markup)


@dp.message(Command('help'))
@security()
async def _help(message: Message):
    if await new_message(message): return
    await help(message)


@dp.callback_query(F.data == "help")
@security()
async def _help_button(callback_query: CallbackQuery):
    if await new_callback_query(callback_query): return
    await callback_query.message.edit_reply_markup()
    await help(callback_query.message)


async def help(message: Message):
    await message.answer("/feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
                         "/my_functions - —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞\n"
                         "/trigonometric - —Ç–∞–±–ª–∏—Ü–∞ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π\n"
                         f"<a href='{SITE}'>tgmaksim.ru</a>", parse_mode=html)


@dp.message(Command('trigonometric'))
@security()
async def _trigonometric(message: Message):
    if await new_message(message): return
    await message.answer_photo(FSInputFile(resources_path("trigonometric.png")))


@dp.message(Command('my_functions'))
@security()
async def _my_functions(message: Message):
    if await new_message(message): return
    await message.answer(
        "<a href='https://t.me/MaksimMyBots/20'>–û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</a>\n"
        "+  -  —Å–ª–æ–∂–µ–Ω–∏–µ\n"
        "-  -  –≤—ã—á–∏—Ç–∞–Ω–∏–µ\n"
        "*  -  —É–º–Ω–æ–∂–µ–Ω–∏–µ\n"
        "/  -  –¥–µ–ª–µ–Ω–∏–µ\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/24'>–ö–æ—Ä–µ–Ω—å –∏ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å:</a>\n"
        "** - –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å\n"
        "sqrt() - –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/25'>–§–∞–∫—Ç–æ—Ä–∏–∞–ª –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ:</a>\n"
        "factorial() - —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª\n"
        "round() - –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/26'>–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã:</a>\n"
        "radians() - –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã\n"
        "sin() - —Å–∏–Ω—É—Å\n"
        "cos() - –∫–æ—Å–∏–Ω—É—Å\n"
        "tan() - —Ç–∞–Ω–≥–µ–Ω—Å\n"
        "e - —á–∏—Å–ª–æ –≠–π–ª–µ—Ä–∞‚âà2.71828\n"
        "pi - —á–∏—Å–ª–æ œÄ‚âà3.14159\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/28'>–û–±—Ä–∞—Ç–Ω—ã–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö:</a>\n"
        "degrees() - –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ —Ä–∞–¥–∏–∞–Ω –≤ –≥—Ä–∞–¥—É—Å—ã\n"
        "asin() - –∞—Ä–∫—Å–∏–Ω—É—Å\n"
        "acos() - –∞—Ä–∫–∫–æ—Å–∏–Ω—É—Å\n"
        "atan() - –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/29'>–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö:</a>\n"
        "sinr() - —Å–∏–Ω—É—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n"
        "cosr() - –∫–æ—Å–∏–Ω—É—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n"
        "tanr() - —Ç–∞–Ω–≥–µ–Ω—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/31'>–û–±—Ä–∞—Ç–Ω—ã–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö:</a>\n"
        "asinr() - –∞—Ä–∫—Å–∏–Ω—É—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n"
        "acosr() - –∞—Ä–∫–∫–æ—Å–∏–Ω—É—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n"
        "atanr() - –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/33'>–î—Ä—É–≥–∏–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∞–Ω–∞–ª–æ–≥–∏:</a>\n"
        "cot() - –∫–æ—Ç–∞–Ω–≥–µ–Ω—Å\n"
        "acot() - –∞—Ä–∫–∫–æ—Ç–∞–Ω–≥–µ–Ω—Å\n"
        "cotr() - –∫–æ—Ç–∞–Ω–≥–µ–Ω—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n"
        "acotr() - –∞—Ä–∫–∫–æ—Ç–∞–Ω–≥–µ–Ω—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö\n"
        "tg() - —Ç–∞–Ω–≥–µ–Ω—Å (–∞–Ω–∞–ª–æ–≥ tan())\n"
        "ctg() - –∫–æ—Ç–∞–Ω–≥–µ–Ω—Å (–∞–Ω–∞–ª–æ–≥ cot())\n"
        "atg() - –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å (–∞–Ω–∞–ª–æ–≥ atan())\n"
        "actg() - –∞—Ä–∫–∫–æ—Ç–∞–Ω–≥–µ–Ω—Å (–∞–Ω–∞–ª–æ–≥ acot())\n"
        "tgr() - —Ç–∞–Ω–≥–µ–Ω—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (–∞–Ω–∞–ª–æ–≥ tanr())\n"
        "atgr() - –∞—Ä–∫—Ç–∞–Ω–≥–µ–Ω—Å –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö (–∞–Ω–∞–ª–æ–≥ atanr())\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/35'>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</a>\n"
        "ave() - —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–±–æ—Ä–∞\n"
        "med() - –º–µ–¥–∏–∞–Ω–∞ –Ω–∞–±–æ—Ä–∞\n"
        "dis() - –¥–∏—Å–ø–µ—Ä—Å–∏—è –Ω–∞–±–æ—Ä–∞\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/36'>–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</a>\n"
        "len() - –ø–æ—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –Ω–∞–±–æ—Ä–µ\n"
        "max() - –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞–±–æ—Ä–µ\n"
        "min() - –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–∞–±–æ—Ä–µ\n"
        "sor() - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞–±–æ—Ä–∞ –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É\n"
        "sum() - —Å—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ –Ω–∞–±–æ—Ä–µ\n"
        "gm() - —Å—Ä–µ–¥–Ω–µ–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –Ω–∞–±–æ—Ä–∞ —á–∏—Å–µ–ª (–∫–æ—Ä–µ–Ω—å n-—Å—Ç–µ–ø–µ–Ω–∏ –∏–∑ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–∏—Å–µ–ª —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º n)\n"
        "abs() - –º–æ–¥—É–ª—å —á–∏—Å–ª–∞\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/38'>–§—É–Ω–∫—Ü–∏—è –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏:</a>\n"
        "con(x, y, z) - –ø–µ—Ä–µ–≤–æ–¥ —á–∏—Å–ª–∞ x –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è y –≤ —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è z\n\n"
        ""
        "<a href='https://t.me/MaksimMyBots/39'>–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</a>\n"
        "–¢–∞–∫–∂–µ –±–æ—Ç —É–º–µ–µ—Ç —Ä–µ—à–∞—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π\n"
        "–ë–æ—Ç –º–æ–∂–µ—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ ? –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        ""
        "<b>–í –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–ª–∞—Ö –ø–∏—à–µ—Ç—Å—è —Ç–æ—á–∫–∞!!! –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö –ø–∏—à—É—Ç—Å—è –±–æ–ª—å—à–∏–º–∏ –±—É–∫–≤–∞–º–∏!!!</b>\n\n",
        disable_web_page_preview=True,
        parse_mode=html)


@dp.callback_query()
@security()
async def _other_callback_query(callback_query: CallbackQuery):
    await new_callback_query(callback_query)


@dp.message()
@security()
async def _messages(message: Message):
    if await new_message(message): return
    if message.reply_to_message and message.content_type == "text":
        await _calculator(message, message.reply_to_message.text)
    elif message.content_type == "text":
        await _calculator(message)


async def _calculator(message: Message, start: str = '', error: str = None):
    try:
        answer = f"<code>{calculator(start + message.text)}</code>"
    except:
        answer = "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —è –Ω–µ –º–æ–≥—É –µ–≥–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å!" or error
    try:
        await message.reply(answer, parse_mode=html, reply_parameters=ReplyParameters(
            message_id=message.message_id, chat_id=message.chat.id, quote=message.text))
    except aiogram.exceptions.TelegramBadRequest:
        await message.reply(answer, parse_mode=html)


async def new_user(message: Message):
    if not await db.execute("SELECT id FROM users WHERE id=?", (str(message.chat.id),)):
        await db.execute("INSERT INTO users VALUES(?, ?)", (message.chat.id, ""))
        Data.users.add(message.chat.id)
    await db.execute("UPDATE users SET last_message=? WHERE id=?", (str(omsk_time(message.date)), message.chat.id))


async def username_acquaintance(message: Message, default: Literal[None, 'first_name'] = None):
    id = message.chat.id
    user = await db.execute("SELECT name FROM acquaintances WHERE id=?", (id,))
    if user:
        return user[0][0]
    return message.from_user.first_name if default == 'first_name' else None


async def developer_command(message: Message) -> bool:
    if message.chat.id == OWNER:
        await new_message(message, False)
        await message.answer("*–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*", parse_mode=markdown)
    else:
        await new_message(message)
        await message.answer("*–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ù–ï –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*", parse_mode=markdown)

    return message.chat.id != OWNER


async def subscribe_to_channel(message: Message):
    if (await bot.get_chat_member(channel, message.from_user.id)).status == 'left' and not message.text.startswith('/start'):
        markup = IMarkup(
            inline_keyboard=[[IButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=subscribe)],
                             [IButton(text="–ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribe")]])
        await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –º–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞. "
                             "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", reply_markup=markup)
        await message.bot.send_message(OWNER, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!")
        return False
    return True


async def new_message(message: Message, /, forward: bool = True) -> bool:
    if message.content_type == "text":
        content = message.text
    elif message.content_type == "web_app_data":
        content = message.web_app_data.data
    else:
        content = f"<{message.content_type}>"
    id = str(message.chat.id)
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    date = str(omsk_time(message.date))
    acquaintance = await username_acquaintance(message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""

    await db.execute("INSERT INTO messages VALUES (?, ?, ?, ?, ?, ?)",
                     (id, username, first_name, last_name, content, date))

    if message.chat.id == OWNER:
        return False

    if message.content_type not in ("text", "web_app_data"):  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º mini app
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {first_name}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {last_name}\n" if last_name else "") +
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)
        await message.forward(OWNER)
    elif forward or (message.entities and message.entities[0].type != 'bot_command'):  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message.entities and message.entities[0].type != 'bot_command':
            await bot.send_message(
                OWNER,
                text=f"ID: {id}\n"
                     f"{acquaintance}" +
                     (f"USERNAME: @{username}\n" if username else "") +
                     f"–ò–º—è: {first_name}\n" +
                     (f"–§–∞–º–∏–ª–∏—è: {last_name}\n" if last_name else "") +
                     f"–í—Ä–µ–º—è: {date}",
                parse_mode=html)
            await message.forward(OWNER)
        else:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å
            try:
                await bot.send_message(
                    OWNER,
                    text=f"ID: {id}\n"
                         f"{acquaintance}" +
                         (f"USERNAME: @{username}\n" if username else "") +
                         f"–ò–º—è: {first_name}\n" +
                         (f"–§–∞–º–∏–ª–∏—è: {last_name}\n" if last_name else "") +
                         (f"<code>{content}</code>\n"
                          if not content.startswith("/") or len(content.split()) > 1 else f"{content}\n") +
                         f"–í—Ä–µ–º—è: {date}",
                    parse_mode=html)
            except:
                await bot.send_message(
                    OWNER,
                    text=f"ID: {id}\n"
                         f"{acquaintance}" +
                         (f"USERNAME: @{username}\n" if username else "") +
                         f"–ò–º—è: {first_name}\n" +
                         (f"–§–∞–º–∏–ª–∏—è: {last_name}\n" if last_name else "") +
                         f"<code>{content}</code>\n"
                         f"–í—Ä–µ–º—è: {date}",
                    parse_mode=html)
                await message.forward(OWNER)

    if message.chat.id not in Data.users:
        await message.forward(OWNER)
    await new_user(message)

    return not await subscribe_to_channel(message)


async def new_callback_query(callback_query: CallbackQuery, /, check_subscribe: bool = True) -> bool:
    message = callback_query.message
    id = str(message.chat.id)
    username = callback_query.from_user.username
    first_name = callback_query.from_user.first_name
    last_name = callback_query.from_user.last_name
    callback_data = callback_query.data
    date = str(omsk_time(message.date))
    acquaintance = await username_acquaintance(message)
    acquaintance = f"<b>–ó–Ω–∞–∫–æ–º—ã–π: {acquaintance}</b>\n" if acquaintance else ""

    await db.execute("INSERT INTO callbacks_query VALUES (?, ?, ?, ?, ?, ?)",
                     (id, username, first_name, last_name, callback_data, date))

    if callback_query.from_user.id != OWNER:
        await bot.send_message(
            OWNER,
            text=f"ID: {id}\n"
                 f"{acquaintance}" +
                 (f"USERNAME: @{username}\n" if username else "") +
                 f"–ò–º—è: {first_name}\n" +
                 (f"–§–∞–º–∏–ª–∏—è: {last_name}\n" if last_name else "") +
                 f"CALLBACK_DATA: {callback_data}\n"
                 f"–í—Ä–µ–º—è: {date}",
            parse_mode=html)

    if check_subscribe and not await subscribe_to_channel(message):
        await callback_query.message.edit_reply_markup()
        return True
    return False


async def start_bot():
    await db.execute("CREATE TABLE IF NOT EXISTS messages (id TEXT, username TEXT, first_name TEXT, last_name TEXT, "
                     "message_text TEXT, datetime TEXT)")
    await db.execute("CREATE TABLE IF NOT EXISTS callbacks_query (id TEXT, username TEXT, first_name TEXT, "
                     "last_name TEXT, callback_data TEXT, datetime TEXT)")
    await db.execute("CREATE TABLE IF NOT EXISTS system_data (key TEXT, value TEXT)")
    await db.execute("CREATE TABLE IF NOT EXISTS acquaintances (id TEXT, username TEXT, first_name TEXT, "
                     "last_name TEXT, name TEXT)")
    await db.execute("CREATE TABLE IF NOT EXISTS users (id TEXT, last_message TEXT)")
    if not await db.execute("SELECT value FROM system_data WHERE key=?", ("pause",)):
        await db.execute("INSERT INTO system_data VALUES(?, ?)", ("pause", "False"))
    if not await db.execute("SELECT value FROM system_data WHERE key=?", ("version",)):
        await db.execute("INSERT INTO system_data VALUES(?, ?)", ("version", "0.0"))

    Data.users = await get_users()

    await bot.send_message(OWNER, f"*–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!üöÄ*", parse_mode=markdown)
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot)


def check_argv():
    program_variant = sys.argv[1]
    if program_variant not in ("release", "debug"):
        raise TypeError("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: release –∏–ª–∏ debug")


if __name__ == '__main__':
    check_argv()
    asyncio.run(start_bot())
